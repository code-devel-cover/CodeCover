// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/covergates/covergates/core (interfaces: UserStore)

// Package mock is a generated GoMock package.
package mock

import (
	core "github.com/covergates/covergates/core"
	scm "github.com/drone/go-scm/scm"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockUserStore is a mock of UserStore interface
type MockUserStore struct {
	ctrl     *gomock.Controller
	recorder *MockUserStoreMockRecorder
}

// MockUserStoreMockRecorder is the mock recorder for MockUserStore
type MockUserStoreMockRecorder struct {
	mock *MockUserStore
}

// NewMockUserStore creates a new mock instance
func NewMockUserStore(ctrl *gomock.Controller) *MockUserStore {
	mock := &MockUserStore{ctrl: ctrl}
	mock.recorder = &MockUserStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockUserStore) EXPECT() *MockUserStoreMockRecorder {
	return m.recorder
}

// Bind mocks base method
func (m *MockUserStore) Bind(arg0 core.SCMProvider, arg1 *core.User, arg2 *scm.User, arg3 *core.Token) (*core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Bind", arg0, arg1, arg2, arg3)
	ret0, _ := ret[0].(*core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Bind indicates an expected call of Bind
func (mr *MockUserStoreMockRecorder) Bind(arg0, arg1, arg2, arg3 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Bind", reflect.TypeOf((*MockUserStore)(nil).Bind), arg0, arg1, arg2, arg3)
}

// Create mocks base method
func (m *MockUserStore) Create(arg0 core.SCMProvider, arg1 *scm.User, arg2 *core.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockUserStoreMockRecorder) Create(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockUserStore)(nil).Create), arg0, arg1, arg2)
}

// Find mocks base method
func (m *MockUserStore) Find(arg0 core.SCMProvider, arg1 *scm.User) (*core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0, arg1)
	ret0, _ := ret[0].(*core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockUserStoreMockRecorder) Find(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockUserStore)(nil).Find), arg0, arg1)
}

// FindByLogin mocks base method
func (m *MockUserStore) FindByLogin(arg0 string) (*core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindByLogin", arg0)
	ret0, _ := ret[0].(*core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindByLogin indicates an expected call of FindByLogin
func (mr *MockUserStoreMockRecorder) FindByLogin(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindByLogin", reflect.TypeOf((*MockUserStore)(nil).FindByLogin), arg0)
}

// ListRepositories mocks base method
func (m *MockUserStore) ListRepositories(arg0 *core.User) ([]*core.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListRepositories", arg0)
	ret0, _ := ret[0].([]*core.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListRepositories indicates an expected call of ListRepositories
func (mr *MockUserStoreMockRecorder) ListRepositories(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListRepositories", reflect.TypeOf((*MockUserStore)(nil).ListRepositories), arg0)
}

// Update mocks base method
func (m *MockUserStore) Update(arg0 core.SCMProvider, arg1 *scm.User, arg2 *core.Token) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0, arg1, arg2)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockUserStoreMockRecorder) Update(arg0, arg1, arg2 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockUserStore)(nil).Update), arg0, arg1, arg2)
}

// UpdateRepositories mocks base method
func (m *MockUserStore) UpdateRepositories(arg0 *core.User, arg1 []*core.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateRepositories", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateRepositories indicates an expected call of UpdateRepositories
func (mr *MockUserStoreMockRecorder) UpdateRepositories(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateRepositories", reflect.TypeOf((*MockUserStore)(nil).UpdateRepositories), arg0, arg1)
}
