// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/covergates/covergates/core (interfaces: ChartService,Chart)

// Package mock is a generated GoMock package.
package mock

import (
	core "github.com/covergates/covergates/core"
	gomock "github.com/golang/mock/gomock"
	io "io"
	reflect "reflect"
)

// MockChartService is a mock of ChartService interface
type MockChartService struct {
	ctrl     *gomock.Controller
	recorder *MockChartServiceMockRecorder
}

// MockChartServiceMockRecorder is the mock recorder for MockChartService
type MockChartServiceMockRecorder struct {
	mock *MockChartService
}

// NewMockChartService creates a new mock instance
func NewMockChartService(ctrl *gomock.Controller) *MockChartService {
	mock := &MockChartService{ctrl: ctrl}
	mock.recorder = &MockChartServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChartService) EXPECT() *MockChartServiceMockRecorder {
	return m.recorder
}

// CoverageDiffTreeMap mocks base method
func (m *MockChartService) CoverageDiffTreeMap(arg0, arg1 *core.Report) core.Chart {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CoverageDiffTreeMap", arg0, arg1)
	ret0, _ := ret[0].(core.Chart)
	return ret0
}

// CoverageDiffTreeMap indicates an expected call of CoverageDiffTreeMap
func (mr *MockChartServiceMockRecorder) CoverageDiffTreeMap(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CoverageDiffTreeMap", reflect.TypeOf((*MockChartService)(nil).CoverageDiffTreeMap), arg0, arg1)
}

// MockChart is a mock of Chart interface
type MockChart struct {
	ctrl     *gomock.Controller
	recorder *MockChartMockRecorder
}

// MockChartMockRecorder is the mock recorder for MockChart
type MockChartMockRecorder struct {
	mock *MockChart
}

// NewMockChart creates a new mock instance
func NewMockChart(ctrl *gomock.Controller) *MockChart {
	mock := &MockChart{ctrl: ctrl}
	mock.recorder = &MockChartMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockChart) EXPECT() *MockChartMockRecorder {
	return m.recorder
}

// Render mocks base method
func (m *MockChart) Render(arg0 io.Writer) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Render", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Render indicates an expected call of Render
func (mr *MockChartMockRecorder) Render(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Render", reflect.TypeOf((*MockChart)(nil).Render), arg0)
}
