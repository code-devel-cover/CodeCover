// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/covergates/covergates/core (interfaces: RepoStore,RepoService)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	core "github.com/covergates/covergates/core"
	gomock "github.com/golang/mock/gomock"
	reflect "reflect"
)

// MockRepoStore is a mock of RepoStore interface
type MockRepoStore struct {
	ctrl     *gomock.Controller
	recorder *MockRepoStoreMockRecorder
}

// MockRepoStoreMockRecorder is the mock recorder for MockRepoStore
type MockRepoStoreMockRecorder struct {
	mock *MockRepoStore
}

// NewMockRepoStore creates a new mock instance
func NewMockRepoStore(ctrl *gomock.Controller) *MockRepoStore {
	mock := &MockRepoStore{ctrl: ctrl}
	mock.recorder = &MockRepoStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoStore) EXPECT() *MockRepoStoreMockRecorder {
	return m.recorder
}

// BatchUpdateOrCreate mocks base method
func (m *MockRepoStore) BatchUpdateOrCreate(arg0 []*core.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "BatchUpdateOrCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// BatchUpdateOrCreate indicates an expected call of BatchUpdateOrCreate
func (mr *MockRepoStoreMockRecorder) BatchUpdateOrCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "BatchUpdateOrCreate", reflect.TypeOf((*MockRepoStore)(nil).BatchUpdateOrCreate), arg0)
}

// Create mocks base method
func (m *MockRepoStore) Create(arg0 *core.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockRepoStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockRepoStore)(nil).Create), arg0)
}

// Creator mocks base method
func (m *MockRepoStore) Creator(arg0 *core.Repo) (*core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Creator", arg0)
	ret0, _ := ret[0].(*core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Creator indicates an expected call of Creator
func (mr *MockRepoStoreMockRecorder) Creator(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Creator", reflect.TypeOf((*MockRepoStore)(nil).Creator), arg0)
}

// Find mocks base method
func (m *MockRepoStore) Find(arg0 *core.Repo) (*core.Repo, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*core.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockRepoStoreMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockRepoStore)(nil).Find), arg0)
}

// FindHook mocks base method
func (m *MockRepoStore) FindHook(arg0 *core.Repo) (*core.Hook, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "FindHook", arg0)
	ret0, _ := ret[0].(*core.Hook)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// FindHook indicates an expected call of FindHook
func (mr *MockRepoStoreMockRecorder) FindHook(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FindHook", reflect.TypeOf((*MockRepoStore)(nil).FindHook), arg0)
}

// Finds mocks base method
func (m *MockRepoStore) Finds(arg0 ...string) ([]*core.Repo, error) {
	m.ctrl.T.Helper()
	varargs := []interface{}{}
	for _, a := range arg0 {
		varargs = append(varargs, a)
	}
	ret := m.ctrl.Call(m, "Finds", varargs...)
	ret0, _ := ret[0].([]*core.Repo)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Finds indicates an expected call of Finds
func (mr *MockRepoStoreMockRecorder) Finds(arg0 ...interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Finds", reflect.TypeOf((*MockRepoStore)(nil).Finds), arg0...)
}

// Setting mocks base method
func (m *MockRepoStore) Setting(arg0 *core.Repo) (*core.RepoSetting, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Setting", arg0)
	ret0, _ := ret[0].(*core.RepoSetting)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Setting indicates an expected call of Setting
func (mr *MockRepoStoreMockRecorder) Setting(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Setting", reflect.TypeOf((*MockRepoStore)(nil).Setting), arg0)
}

// Update mocks base method
func (m *MockRepoStore) Update(arg0 *core.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Update", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Update indicates an expected call of Update
func (mr *MockRepoStoreMockRecorder) Update(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Update", reflect.TypeOf((*MockRepoStore)(nil).Update), arg0)
}

// UpdateCreator mocks base method
func (m *MockRepoStore) UpdateCreator(arg0 *core.Repo, arg1 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateCreator", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateCreator indicates an expected call of UpdateCreator
func (mr *MockRepoStoreMockRecorder) UpdateCreator(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateCreator", reflect.TypeOf((*MockRepoStore)(nil).UpdateCreator), arg0, arg1)
}

// UpdateHook mocks base method
func (m *MockRepoStore) UpdateHook(arg0 *core.Repo, arg1 *core.Hook) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateHook", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateHook indicates an expected call of UpdateHook
func (mr *MockRepoStoreMockRecorder) UpdateHook(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateHook", reflect.TypeOf((*MockRepoStore)(nil).UpdateHook), arg0, arg1)
}

// UpdateOrCreate mocks base method
func (m *MockRepoStore) UpdateOrCreate(arg0 *core.Repo) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateOrCreate", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateOrCreate indicates an expected call of UpdateOrCreate
func (mr *MockRepoStoreMockRecorder) UpdateOrCreate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateOrCreate", reflect.TypeOf((*MockRepoStore)(nil).UpdateOrCreate), arg0)
}

// UpdateSetting mocks base method
func (m *MockRepoStore) UpdateSetting(arg0 *core.Repo, arg1 *core.RepoSetting) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "UpdateSetting", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// UpdateSetting indicates an expected call of UpdateSetting
func (mr *MockRepoStoreMockRecorder) UpdateSetting(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "UpdateSetting", reflect.TypeOf((*MockRepoStore)(nil).UpdateSetting), arg0, arg1)
}

// MockRepoService is a mock of RepoService interface
type MockRepoService struct {
	ctrl     *gomock.Controller
	recorder *MockRepoServiceMockRecorder
}

// MockRepoServiceMockRecorder is the mock recorder for MockRepoService
type MockRepoServiceMockRecorder struct {
	mock *MockRepoService
}

// NewMockRepoService creates a new mock instance
func NewMockRepoService(ctrl *gomock.Controller) *MockRepoService {
	mock := &MockRepoService{ctrl: ctrl}
	mock.recorder = &MockRepoServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockRepoService) EXPECT() *MockRepoServiceMockRecorder {
	return m.recorder
}

// Synchronize mocks base method
func (m *MockRepoService) Synchronize(arg0 context.Context, arg1 *core.User) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Synchronize", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// Synchronize indicates an expected call of Synchronize
func (mr *MockRepoServiceMockRecorder) Synchronize(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Synchronize", reflect.TypeOf((*MockRepoService)(nil).Synchronize), arg0, arg1)
}
