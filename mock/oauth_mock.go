// Code generated by MockGen. DO NOT EDIT.
// Source: github.com/covergates/covergates/core (interfaces: OAuthService,OAuthStore)

// Package mock is a generated GoMock package.
package mock

import (
	context "context"
	core "github.com/covergates/covergates/core"
	gomock "github.com/golang/mock/gomock"
	http "net/http"
	reflect "reflect"
)

// MockOAuthService is a mock of OAuthService interface
type MockOAuthService struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthServiceMockRecorder
}

// MockOAuthServiceMockRecorder is the mock recorder for MockOAuthService
type MockOAuthServiceMockRecorder struct {
	mock *MockOAuthService
}

// NewMockOAuthService creates a new mock instance
func NewMockOAuthService(ctrl *gomock.Controller) *MockOAuthService {
	mock := &MockOAuthService{ctrl: ctrl}
	mock.recorder = &MockOAuthServiceMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAuthService) EXPECT() *MockOAuthServiceMockRecorder {
	return m.recorder
}

// CreateToken mocks base method
func (m *MockOAuthService) CreateToken(arg0 context.Context, arg1 string) (*core.OAuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "CreateToken", arg0, arg1)
	ret0, _ := ret[0].(*core.OAuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// CreateToken indicates an expected call of CreateToken
func (mr *MockOAuthServiceMockRecorder) CreateToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "CreateToken", reflect.TypeOf((*MockOAuthService)(nil).CreateToken), arg0, arg1)
}

// DeleteToken mocks base method
func (m *MockOAuthService) DeleteToken(arg0 context.Context, arg1 *core.OAuthToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "DeleteToken", arg0, arg1)
	ret0, _ := ret[0].(error)
	return ret0
}

// DeleteToken indicates an expected call of DeleteToken
func (mr *MockOAuthServiceMockRecorder) DeleteToken(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "DeleteToken", reflect.TypeOf((*MockOAuthService)(nil).DeleteToken), arg0, arg1)
}

// ListTokens mocks base method
func (m *MockOAuthService) ListTokens(arg0 context.Context) ([]*core.OAuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "ListTokens", arg0)
	ret0, _ := ret[0].([]*core.OAuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// ListTokens indicates an expected call of ListTokens
func (mr *MockOAuthServiceMockRecorder) ListTokens(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ListTokens", reflect.TypeOf((*MockOAuthService)(nil).ListTokens), arg0)
}

// Validate mocks base method
func (m *MockOAuthService) Validate(arg0 *http.Request) (*core.User, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Validate", arg0)
	ret0, _ := ret[0].(*core.User)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Validate indicates an expected call of Validate
func (mr *MockOAuthServiceMockRecorder) Validate(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Validate", reflect.TypeOf((*MockOAuthService)(nil).Validate), arg0)
}

// WithUser mocks base method
func (m *MockOAuthService) WithUser(arg0 context.Context, arg1 *core.User) context.Context {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "WithUser", arg0, arg1)
	ret0, _ := ret[0].(context.Context)
	return ret0
}

// WithUser indicates an expected call of WithUser
func (mr *MockOAuthServiceMockRecorder) WithUser(arg0, arg1 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "WithUser", reflect.TypeOf((*MockOAuthService)(nil).WithUser), arg0, arg1)
}

// MockOAuthStore is a mock of OAuthStore interface
type MockOAuthStore struct {
	ctrl     *gomock.Controller
	recorder *MockOAuthStoreMockRecorder
}

// MockOAuthStoreMockRecorder is the mock recorder for MockOAuthStore
type MockOAuthStoreMockRecorder struct {
	mock *MockOAuthStore
}

// NewMockOAuthStore creates a new mock instance
func NewMockOAuthStore(ctrl *gomock.Controller) *MockOAuthStore {
	mock := &MockOAuthStore{ctrl: ctrl}
	mock.recorder = &MockOAuthStoreMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use
func (m *MockOAuthStore) EXPECT() *MockOAuthStoreMockRecorder {
	return m.recorder
}

// Create mocks base method
func (m *MockOAuthStore) Create(arg0 *core.OAuthToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Create", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Create indicates an expected call of Create
func (mr *MockOAuthStoreMockRecorder) Create(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Create", reflect.TypeOf((*MockOAuthStore)(nil).Create), arg0)
}

// Delete mocks base method
func (m *MockOAuthStore) Delete(arg0 *core.OAuthToken) error {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Delete", arg0)
	ret0, _ := ret[0].(error)
	return ret0
}

// Delete indicates an expected call of Delete
func (mr *MockOAuthStoreMockRecorder) Delete(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Delete", reflect.TypeOf((*MockOAuthStore)(nil).Delete), arg0)
}

// Find mocks base method
func (m *MockOAuthStore) Find(arg0 *core.OAuthToken) (*core.OAuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "Find", arg0)
	ret0, _ := ret[0].(*core.OAuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// Find indicates an expected call of Find
func (mr *MockOAuthStoreMockRecorder) Find(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "Find", reflect.TypeOf((*MockOAuthStore)(nil).Find), arg0)
}

// List mocks base method
func (m *MockOAuthStore) List(arg0 *core.User) ([]*core.OAuthToken, error) {
	m.ctrl.T.Helper()
	ret := m.ctrl.Call(m, "List", arg0)
	ret0, _ := ret[0].([]*core.OAuthToken)
	ret1, _ := ret[1].(error)
	return ret0, ret1
}

// List indicates an expected call of List
func (mr *MockOAuthStoreMockRecorder) List(arg0 interface{}) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "List", reflect.TypeOf((*MockOAuthStore)(nil).List), arg0)
}
